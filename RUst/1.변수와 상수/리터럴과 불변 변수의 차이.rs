러스트를 공부하다보면 불변성과 리터럴에 대한 이야기가 많이 나옵니다. 잘 모르면 헷갈리기도 하고요

가장 쉽게 이해하는 건 표현식이냐, 아니냐의 차이가 있습니다.

리터럴은 코드에 직접적으로 "고정되며 명시된 값"을 의마합니다. 숫자, 문자열, 배열, 구조체 등을 나타내지요
  
let x = 5;
let y = "Hello, world!";


해당 소스코드에서 x에는 숫자 5가, y는 Hello, world라는 문자열이 리터럴 값을 가지는 불변성 변수 입니다. 이 변수들은 값을 변경 할 수 없습니다.

let x = 5;           // x는 5라는 리터럴 값을 가짐
let y = x + 1;       // x + 1은 표현식, x의 값(5)에 1을 더한 값(6)으로 평가됨

"왜 x + 1이 리터럴이 아닌가?"

x + 1은 계산이 필요하기 때문에 리터럴이 아닙니다

먼저 x + 1은 x의 현재 값에 1을 더하는 계산을 필요로 합니다. 이 계산은 프로그램이 실행될 때 평가됩니다.
또한 동적값 x의 값이 무엇이냐에 따라 x + 1의 결과가 달라집니다. 만약 x가 다른 값으로 변경된다면, x + 1의 결과도 달라지게 됩니다.

리터럴에는 추가적인 평가도, 변경도 필요없는 값 입니다. 1년에 월이 12개 있고, 생일이 변하지 않듯 표현식이 필요없는 값 입니다.

  
추가적으로 주의할 점은, 함수 호출은 리터럴이 아니란 것 입니다
  
fn get_number() -> i32 {
    5
}
let a = get_number();  // get_number()는 표현식, 결과는 리터럴이 아님
